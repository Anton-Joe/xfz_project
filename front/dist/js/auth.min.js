function Auth(){this.maskWrapper=$(".mask-wrapper"),this.scrollWrapper=$(".scroll-wrapper")}Auth.prototype.run=function(){var t=this;t.listenShowHideEvent(),t.listenSwitchEvent(),t.listenSigninEvent()},Auth.prototype.showEvent=function(){this.maskWrapper.show()},Auth.prototype.hideEvent=function(){this.maskWrapper.hide()},Auth.prototype.listenShowHideEvent=function(){var t=this;$(".signin-btn").click(function(){t.scrollWrapper.css({left:0}),t.showEvent()}),$(".signup-btn").click(function(){t.scrollWrapper.css({left:-400}),t.showEvent()}),$(".close-btn").click(function(){$(".mask-wrapper").hide()})},Auth.prototype.listenSwitchEvent=function(){var n=this;$(".switch").click(function(){var t=n.scrollWrapper.css("left");0===(t=parseInt(t))?n.scrollWrapper.animate({left:-400},400):n.scrollWrapper.animate({left:0},400)})},Auth.prototype.listenSigninEvent=function(){var o=this,t=$(".signin-group"),i=t.find("input[name='telephone']"),r=t.find("input[name='password']"),s=t.find("input[name='remember']");t.find(".submit-btn").click(function(){var t=i.val(),n=r.val(),e=s.prop("checked");xfzajax.post({url:"/account/login/",data:{telephone:t,password:n,remember:e?1:0},success:function(t){if(200==t.code)o.hideEvent(),window.location.reload();else{var n=t.message;if("string"==typeof n||n.constructor==String)window.messageBox.show(n);else for(var e in n){var i=n[e][0];window.messageBox.show(i)}}},fail:function(t){console.log("error")}})})},$(function(){(new Auth).run()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC5taW4uanMiLCJzb3VyY2VzIjpbImF1dGguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gLy8g54K55Ye755m75b2V5oyJ6ZKu5by55Ye65qih5oCB5a+56K+d5qGGXHJcbi8vICQoZnVuY3Rpb24gKCkge1xyXG4vLyAgICAkKFwiI2J0blwiKS5jbGljayhmdW5jdGlvbiAoKSB7XHJcbi8vICAgICAgICAkKFwiLm1hc2std3JhcHBlclwiKS5zaG93KClcclxuLy8gICAgfSk7XHJcbi8vXHJcbi8vICAgICQoXCIuY2xvc2UtYnRuXCIpLmNsaWNrKGZ1bmN0aW9uKCl7XHJcbi8vICAgICAgICAkKFwiLm1hc2std3JhcHBlclwiKS5oaWRlKCk7XHJcbi8vICAgICB9KTtcclxuLy8gfSk7XHJcblxyXG5cclxuZnVuY3Rpb24gQXV0aCgpe1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgc2VsZi5tYXNrV3JhcHBlciA9ICQoJy5tYXNrLXdyYXBwZXInKTtcclxuICAgIHNlbGYuc2Nyb2xsV3JhcHBlciA9ICQoXCIuc2Nyb2xsLXdyYXBwZXJcIik7XHJcbn1cclxuXHJcbkF1dGgucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uKCl7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICBzZWxmLmxpc3RlblNob3dIaWRlRXZlbnQoKTtcclxuICAgIHNlbGYubGlzdGVuU3dpdGNoRXZlbnQoKTtcclxuICAgIHNlbGYubGlzdGVuU2lnbmluRXZlbnQoKTtcclxufTtcclxuXHJcbkF1dGgucHJvdG90eXBlLnNob3dFdmVudCA9IGZ1bmN0aW9uKCl7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICBzZWxmLm1hc2tXcmFwcGVyLnNob3coKTtcclxufTtcclxuXHJcbkF1dGgucHJvdG90eXBlLmhpZGVFdmVudCA9IGZ1bmN0aW9uKCl7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICBzZWxmLm1hc2tXcmFwcGVyLmhpZGUoKTtcclxufTtcclxuXHJcbkF1dGgucHJvdG90eXBlLmxpc3RlblNob3dIaWRlRXZlbnQgPSBmdW5jdGlvbigpe1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgJChcIi5zaWduaW4tYnRuXCIpLmNsaWNrKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgc2VsZi5zY3JvbGxXcmFwcGVyLmNzcyh7J2xlZnQnOjB9KTtcclxuICAgICAgICBzZWxmLnNob3dFdmVudCgpO1xyXG4gICAgfSk7XHJcbiAgICAgJChcIi5zaWdudXAtYnRuXCIpLmNsaWNrKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgc2VsZi5zY3JvbGxXcmFwcGVyLmNzcyh7J2xlZnQnOi00MDB9KTtcclxuICAgICAgICBzZWxmLnNob3dFdmVudCgpO1xyXG5cclxuICAgIH0pO1xyXG4gICAgJChcIi5jbG9zZS1idG5cIikuY2xpY2soZnVuY3Rpb24oKXtcclxuICAgICAgICQoXCIubWFzay13cmFwcGVyXCIpLmhpZGUoKTtcclxuICAgICAgIC8vIOa4heeQhmlucHV06L6T5YWl5qGG5YaF55qE5pWw5o2uXHJcbiAgICB9KTtcclxufTtcclxuXHJcbkF1dGgucHJvdG90eXBlLmxpc3RlblN3aXRjaEV2ZW50PSBmdW5jdGlvbigpe1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgdmFyIHN3aXRjaGVyID0gICQoXCIuc3dpdGNoXCIpO1xyXG4gICAgc3dpdGNoZXIuY2xpY2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBjdXJyZW50X2xlZnQgPSBzZWxmLnNjcm9sbFdyYXBwZXIuY3NzKFwibGVmdFwiKTtcclxuICAgICAgICBjdXJyZW50X2xlZnQgPSBwYXJzZUludChjdXJyZW50X2xlZnQpO1xyXG4gICAgICAgIGlmKGN1cnJlbnRfbGVmdCA9PT0gMCl7XHJcbiAgICAgICAgICAgIHNlbGYuc2Nyb2xsV3JhcHBlci5hbmltYXRlKHsnbGVmdCc6LTQwMH0sNDAwKTtcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgc2VsZi5zY3JvbGxXcmFwcGVyLmFuaW1hdGUoeydsZWZ0JzowfSw0MDApO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59O1xyXG5cclxuQXV0aC5wcm90b3R5cGUubGlzdGVuU2lnbmluRXZlbnQgPSBmdW5jdGlvbigpe1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgdmFyIHNpZ25pbkdyb3VwID0gJCgnLnNpZ25pbi1ncm91cCcpO1xyXG4gICAgdmFyIHRlbGVwaG9uZUlucHV0ID0gc2lnbmluR3JvdXAuZmluZChcImlucHV0W25hbWU9J3RlbGVwaG9uZSddXCIpO1xyXG4gICAgdmFyIHBhc3N3b3JkSW5wdXQgPSBzaWduaW5Hcm91cC5maW5kKFwiaW5wdXRbbmFtZT0ncGFzc3dvcmQnXVwiKTtcclxuICAgIHZhciByZW1lbWJlcklucHV0ID0gc2lnbmluR3JvdXAuZmluZChcImlucHV0W25hbWU9J3JlbWVtYmVyJ11cIik7XHJcblxyXG4gICAgdmFyIHN1Ym1pdEJ0biA9IHNpZ25pbkdyb3VwLmZpbmQoJy5zdWJtaXQtYnRuJyk7XHJcbiAgICBzdWJtaXRCdG4uY2xpY2soZnVuY3Rpb24oKXtcclxuICAgICAgIHZhciB0ZWxlcGhvbmUgPSB0ZWxlcGhvbmVJbnB1dC52YWwoKTtcclxuICAgICAgIHZhciBwYXNzd29yZCA9IHBhc3N3b3JkSW5wdXQudmFsKCk7XHJcbiAgICAgICB2YXIgcmVtZW1iZXIgPSByZW1lbWJlcklucHV0LnByb3AoJ2NoZWNrZWQnKTtcclxuXHJcbiAgICAgICB4ZnphamF4LnBvc3Qoe1xyXG4gICAgICAgICAgJ3VybCc6ICcvYWNjb3VudC9sb2dpbi8nLFxyXG4gICAgICAgICAgJ2RhdGEnOiB7XHJcbiAgICAgICAgICAgICAgJ3RlbGVwaG9uZSc6IHRlbGVwaG9uZSxcclxuICAgICAgICAgICAgICAncGFzc3dvcmQnOiBwYXNzd29yZCxcclxuICAgICAgICAgICAgICAncmVtZW1iZXInOiByZW1lbWJlcj8xOjAsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgICdzdWNjZXNzJzogZnVuY3Rpb24ocmVzdWx0KXtcclxuICAgICAgICAgICAgICAgaWYocmVzdWx0Wydjb2RlJ10gPT0gMjAwKXtcclxuICAgICAgICAgICAgICAgICAgIHNlbGYuaGlkZUV2ZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XHJcbiAgICAgICAgICAgICAgIH1lbHNlIHtcclxuICAgICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlT2JqZWN0ID0gcmVzdWx0WydtZXNzYWdlJ107XHJcbiAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2VPYmplY3QgPT0gJ3N0cmluZycgfHwgbWVzc2FnZU9iamVjdC5jb25zdHJ1Y3RvciA9PSBTdHJpbmcpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKG1lc3NhZ2VPYmplY3QpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5tZXNzYWdlQm94LnNob3cobWVzc2FnZU9iamVjdClcclxuICAgICAgICAgICAgICAgICAgIH1lbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGtleSBpbiBtZXNzYWdlT2JqZWN0KXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1lc3NhZ2VzID0gbWVzc2FnZU9iamVjdFtrZXldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZSA9IG1lc3NhZ2VzWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhtZXNzYWdlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubWVzc2FnZUJveC5zaG93KG1lc3NhZ2UpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgfSxcclxuICAgICAgICAgICAnZmFpbCc6IGZ1bmN0aW9uKGVycm9yKXtcclxuICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZXJyb3InKTtcclxuICAgICAgICAgICB9LFxyXG4gICAgICAgfSk7XHJcbiAgICB9KTtcclxufTtcclxuXHJcbiQoZnVuY3Rpb24gKCkge1xyXG4gICB2YXIgYXV0aCA9IG5ldyBBdXRoKCk7XHJcbiAgIGF1dGgucnVuKCk7XHJcbn0pO1xyXG5cclxuXHJcblxyXG4iXSwibmFtZXMiOlsiQXV0aCIsInRoaXMiLCJtYXNrV3JhcHBlciIsIiQiLCJzY3JvbGxXcmFwcGVyIiwicHJvdG90eXBlIiwicnVuIiwic2VsZiIsImxpc3RlblNob3dIaWRlRXZlbnQiLCJsaXN0ZW5Td2l0Y2hFdmVudCIsImxpc3RlblNpZ25pbkV2ZW50Iiwic2hvd0V2ZW50Iiwic2hvdyIsImhpZGVFdmVudCIsImhpZGUiLCJjbGljayIsImNzcyIsImxlZnQiLCJjdXJyZW50X2xlZnQiLCJwYXJzZUludCIsImFuaW1hdGUiLCJzaWduaW5Hcm91cCIsInRlbGVwaG9uZUlucHV0IiwiZmluZCIsInBhc3N3b3JkSW5wdXQiLCJyZW1lbWJlcklucHV0IiwidGVsZXBob25lIiwidmFsIiwicGFzc3dvcmQiLCJyZW1lbWJlciIsInByb3AiLCJ4ZnphamF4IiwicG9zdCIsInVybCIsImRhdGEiLCJzdWNjZXNzIiwicmVzdWx0Iiwid2luZG93IiwibG9jYXRpb24iLCJyZWxvYWQiLCJtZXNzYWdlT2JqZWN0IiwiY29uc3RydWN0b3IiLCJTdHJpbmciLCJtZXNzYWdlQm94Iiwia2V5IiwibWVzc2FnZSIsImZhaWwiLCJlcnJvciIsImNvbnNvbGUiLCJsb2ciXSwibWFwcGluZ3MiOiJBQVlBLFNBQVNBLE9BQ01DLEtBQ05DLFlBQWNDLEVBQUUsaUJBRFZGLEtBRU5HLGNBQWdCRCxFQUFFLG1CQUczQkgsS0FBS0ssVUFBVUMsSUFBTSxXQUNqQixJQUFJQyxFQUFPTixLQUNYTSxFQUFLQyxzQkFDTEQsRUFBS0Usb0JBQ0xGLEVBQUtHLHFCQUdUVixLQUFLSyxVQUFVTSxVQUFZLFdBQ1pWLEtBQ05DLFlBQVlVLFFBR3JCWixLQUFLSyxVQUFVUSxVQUFZLFdBQ1paLEtBQ05DLFlBQVlZLFFBR3JCZCxLQUFLSyxVQUFVRyxvQkFBc0IsV0FDakMsSUFBSUQsRUFBT04sS0FDWEUsRUFBRSxlQUFlWSxNQUFNLFdBQ25CUixFQUFLSCxjQUFjWSxJQUFJLENBQUNDLEtBQU8sSUFDL0JWLEVBQUtJLGNBRVJSLEVBQUUsZUFBZVksTUFBTSxXQUNwQlIsRUFBS0gsY0FBY1ksSUFBSSxDQUFDQyxNQUFRLE1BQ2hDVixFQUFLSSxjQUdUUixFQUFFLGNBQWNZLE1BQU0sV0FDbkJaLEVBQUUsaUJBQWlCVyxVQUsxQmQsS0FBS0ssVUFBVUksa0JBQW1CLFdBQzlCLElBQUlGLEVBQU9OLEtBQ0tFLEVBQUUsV0FDVFksTUFBTSxXQUNYLElBQUlHLEVBQWVYLEVBQUtILGNBQWNZLElBQUksUUFFdEIsS0FEcEJFLEVBQWVDLFNBQVNELElBRXBCWCxFQUFLSCxjQUFjZ0IsUUFBUSxDQUFDSCxNQUFRLEtBQUssS0FFekNWLEVBQUtILGNBQWNnQixRQUFRLENBQUNILEtBQU8sR0FBRyxRQUtsRGpCLEtBQUtLLFVBQVVLLGtCQUFvQixXQUMvQixJQUFJSCxFQUFPTixLQUNQb0IsRUFBY2xCLEVBQUUsaUJBQ2hCbUIsRUFBaUJELEVBQVlFLEtBQUssMkJBQ2xDQyxFQUFnQkgsRUFBWUUsS0FBSywwQkFDakNFLEVBQWdCSixFQUFZRSxLQUFLLDBCQUVyQkYsRUFBWUUsS0FBSyxlQUN2QlIsTUFBTSxXQUNiLElBQUlXLEVBQVlKLEVBQWVLLE1BQzNCQyxFQUFXSixFQUFjRyxNQUN6QkUsRUFBV0osRUFBY0ssS0FBSyxXQUVsQ0MsUUFBUUMsS0FBSyxDQUNWQyxJQUFPLGtCQUNQQyxLQUFRLENBQ0pSLFVBQWFBLEVBQ2JFLFNBQVlBLEVBQ1pDLFNBQVlBLEVBQVMsRUFBRSxHQUUxQk0sUUFBVyxTQUFTQyxHQUNoQixHQUFxQixLQUFsQkEsRUFBYSxLQUNaN0IsRUFBS00sWUFDTHdCLE9BQU9DLFNBQVNDLGFBQ2QsQ0FDRixJQUFJQyxFQUFnQkosRUFBZ0IsUUFDcEMsR0FBNEIsaUJBQWpCSSxHQUE2QkEsRUFBY0MsYUFBZUMsT0FFakVMLE9BQU9NLFdBQVcvQixLQUFLNEIsUUFFdkIsSUFBSSxJQUFJSSxLQUFPSixFQUFjLENBQ3pCLElBQ0lLLEVBRFdMLEVBQWNJLEdBQ04sR0FFdkJQLE9BQU9NLFdBQVcvQixLQUFLaUMsTUFLdkNDLEtBQVEsU0FBU0MsR0FDZEMsUUFBUUMsSUFBSSxlQU0xQjlDLEVBQUUsWUFDWSxJQUFJSCxNQUNWTSJ9
